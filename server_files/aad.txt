

CREATE TABLE category (
    categoryId INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description VARCHAR(255) NOT NULL UNIQUE,
    image VARCHAR(255) NOT NULL UNIQUE
);

INSERT INTO category (name, description, image) 
VALUES ('mens', 'All kinds of mens ware ', 'https://i.pinimg.com/736x/34/30/df/3430df8de37e672a9a63039580721898.jpg');



CREATE TABLE product (
    productId BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(500) NOT NULL,
    price DOUBLE NOT NULL,
    stock INT NOT NULL,
    categoryId INT,
    imagepath VARCHAR(255),
    FOREIGN KEY (categoryId) REFERENCES category(categoryId) ON DELETE SET NULL
);

CREATE TABLE user (
    userId BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('ADMIN', 'CUSTOMER') NOT NULL DEFAULT 'CUSTOMER',
    status BOOLEAN NOT NULL DEFAULT TRUE
);


INSERT INTO user (username, email, password, role, status) 
VALUES ('ama', 'ama4@gmail.com', '12345678', 'ADMIN', TRUE);

CREATE TABLE cart_item (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    userId BIGINT NOT NULL,
    productId BIGINT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (userId) REFERENCES User(userId),
    FOREIGN KEY (productId) REFERENCES Product(productId)
);



CREATE TABLE order_table (
    orderId BIGINT AUTO_INCREMENT PRIMARY KEY,
    userId BIGINT NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    totalPrice DOUBLE NOT NULL,
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (userId) REFERENCES User(userId)
);



CREATE TABLE order_detail (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    orderId BIGINT NOT NULL,
    productId BIGINT NOT NULL,
    quantity INT NOT NULL,
    price DOUBLE NOT NULL,
    FOREIGN KEY (orderId) REFERENCES order_table(orderId) ON DELETE CASCADE,
    FOREIGN KEY (productId) REFERENCES product(productId) ON DELETE CASCADE
);































CREATE TABLE order_table (
    orderId BIGINT AUTO_INCREMENT PRIMARY KEY,
    userId BIGINT NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    totalPrice DOUBLE NOT NULL,
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (userId) REFERENCES User(userId)
);







CREATE TABLE order_detail (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    orderId BIGINT NOT NULL,
    productId BIGINT NOT NULL,
    quantity INT NOT NULL,
    price DOUBLE NOT NULL,
    FOREIGN KEY (orderId) REFERENCES order_table(orderId) ON DELETE CASCADE,
    FOREIGN KEY (productId) REFERENCES product(productId) ON DELETE CASCADE
);

























<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Item</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css" rel="stylesheet">
</head>
<body>

<div class="container mt-5">
  <h1 class="text-center">Customer Management System</h1>
  <h1 class="text-center">Item Form</h1>

  <hr/>

  <button type="button" class="btn btn-primary mb-3 text-right" data-bs-toggle="modal"
          data-bs-target="#itemModal">
    Add New Item
  </button>

  <!-- Add Item Modal -->
  <div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="ItemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="container m-2">
          <form id="addStudentForm">
            <div class="mb-3">
              <label for="code" class="form-label">Code</label>
              <input type="text" class="form-control" id="code" required>
            </div>
            <div class="mb-3">
              <label for="desc" class="form-label">Description</label>
              <input type="text" class="form-control" id="desc" required>
            </div>
            <div class="mb-3">
              <label for="qty" class="form-label">Qty</label>
              <input type="text" class="form-control" id="qty" required>
            </div>
            <div class="mb-3">
              <label for="price" class="form-label">Price</label>
              <input type="text" class="form-control" id="price" required>
            </div>
            <button id="btn_save_Item" type="submit" class="btn btn-primary">Save</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Update Item Modal -->
  <div class="modal fade" id="updateItemModal" tabindex="-1" aria-labelledby="updateItemModalLabel"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="container m-2">
          <form id="updateItemForm">
            <div class="mb-3">
              <label for="updated_Item_id" class="form-label">Code</label>
              <input type="text" class="form-control" id="updated_Item_id" readonly>
            </div>
            <div class="mb-3">
              <label for="updated_desc" class="form-label">Description</label>
              <input type="text" class="form-control" id="updated_desc" required>
            </div>
            <div class="mb-3">
              <label for="updated_qty" class="form-label">qty</label>
              <input type="text" class="form-control" id="updated_qty" required>
            </div>
            <div class="mb-3">
              <label for="updated_price" class="form-label">Price</label>
              <input type="text" class="form-control" id="updated_price" required>
            </div>

            <button id="btn_update_item" type="submit" class="btn btn-success">Update</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Item Table -->
  <table class="table table-bordered">
    <thead>
    <tr>
      <td>Code</td>
      <td>Description</td>
      <td>Qty</td>
      <td>Price</td>
      <td>Actions</td>
    </tr>
    </thead>
    <tbody id="ItemTableBody">
    </tbody>
  </table>
</div>
<script src="js/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
<script>

  //fetch customers
  const fetchStudentData = () => {
    $('#item-Table').empty();

    $.ajax({
      url: `http://localhost:8080/Applications1_Web_exploded/item`,
      type: "GET",
      success: (res) => {
        console.log(res);
        if (res.length === 0) {
          $('#item-Table').append(`<tr><td colspan="4">No item found</td></tr>`);
        } else {
          res.forEach(student => {
            $('#item-Table').append(`
                        <tr>
                            <td>${student.code}</td>
                            <td>${student.description}</td>
                            <td>${student.qtyOnHand}</td>
                            <td>${student.unitPrice}</td>

                            <td>
<button class="btn btn-primary btn-sm" onclick="editStudent('${student.code}','${student.description}','${student.qtyOnHand}','${student.unitPrice}')">Edit</button>
 <button class="btn btn-danger btn-sm" onclick="deleteStudent('${student.code}')">Delete</button>
                            </td>
                        </tr>
                    `);
          });
        }
      },
      error: (err) => {
        console.error(err);
        alert("Failed to load items. Please try again.");
      }
    });
  }

  const generateNewItemCode = () => {
    $.ajax({
      url: `http://localhost:8080/Application1_Web_exploded/item?action=generateNewId`,
      type: "GET",
      success: (res) => {
        $('#code').val(res)
      },
      error: (err) => {
        console.error(err);
        alert("Failed to generate item code. Please try again.");
      }
    });
  }

  const editStudent = (code, descrption, qty,unitPrice) => {
    $('#updated_Item_code').val(ucode)
    $('#updated_descrption').val(descrption)
    $('#updated_qty').val(qtyOnHand)
    $('#updated_price').val(unitPrice)

    $('#updateStudentModal').modal('show')

  }

  $('#btn_update_student').click((e) => {
    e.preventDefault()

    const ucode = $('#updated_Item_code').val()
    const descrption = $('#updated_descrption').val()
    const qty = $('#updated_qty').val()
    const unitPrice = $('#updated_price').val()


    $.ajax({
      url: `http://localhost:8080/Applications1_Web_exploded/item?code=${code}&descrption=${descrption}&qtyOnHand=${qty}&unitPrice=${unitPrice}`,
      type: "PUT",
      success: (res) => {
        fetchStudentData()
        console.log(res)
      },
      error: (err) => {
        console.error(err);
      }
    })

  })

  function deleteStudent(code) {
    if (confirm("Are you sure ?")) {
      $.ajax({
        url: `http://localhost:8080/Applications1_Web_exploded/item?code=${code}`,
        type: "DELETE",
        success: () => {
          alert("Item deleted successfully!");
          fetchStudentData();
        },
        error: (err) => {
          console.error(err);
          alert("Failed to delete item!");
        }
      });
    }
  }


  const generateNewItemId = () => {
    $.ajax({
      url: `http://localhost:8080/Application1_Web_exploded/item?action=generateNewId`,
      type: "GET",
      success: (res) => {
        $('#code').val(res)
      },
      error: (err) => {
        console.error(err);
        alert("Failed to generate item code. Please try again.");
      }
    });
  }


  $('#addNewItem').click((e) => {
    generateNewItemId();
  })



  $('#btn_save_student').on('click', function (e) {
    e.preventDefault();

    const code = $('#code').val().trim();
    const descrpiton = $('#descrpiton').val().trim();
    const qtyOnHand = $('#qty').val().trim();
    const unitPrice = $('#unitPrice').val().trim();

    if (!code || !descrpiton || !qtyOnHand || !unitPrice ) {
      alert("All fields are required!");
      return;
    }

    $.ajax({
      url: `http://localhost:8080/Applications1_Web_exploded/item`,
      type: "POST",
      data: {
        code: code,
        description: descrpiton,
        qtyOnHand: qtyOnHand,
        unitPrice:unitPrice
      },
      success: () => {
        alert("Item saved successfully!");
        $('#studentModal').modal('hide');
        fetchStudentData();
        $('#code').val('');
        $('#descrpiton').val('');
        $('#qty').val('');
        $('#unitPrice').val('');

      },
      error: (err) => {
        console.error(err);
        alert("Failed to save item. Please try again.");
      }
    });
  });



  fetchStudentData();

</script>


USE ecommerce;


INSERT INTO users (full_name, email, password, role, status) 
VALUES ('Thushini Akashi', thushini@gmail.com'1234', 'admin', 'active');
INSERT INTO users (full_name, email, password, role, status) 
VALUES ('Anoma Nilanthi', 'anoma@gmail.com', '123456', 'customer', 'active');
